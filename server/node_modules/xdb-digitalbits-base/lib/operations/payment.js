'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.payment = payment;

var _digitalbitsXdr_generated = require('../generated/digitalbits-xdr_generated');

var _digitalbitsXdr_generated2 = _interopRequireDefault(_digitalbitsXdr_generated);

var _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a payment operation.
 *
 * @function
 * @alias Operation.payment
 * @see https://developers.digitalbits.io/guides/concepts/list-of-operations.html#payment
 *
 * @param {object}  opts - Options object
 * @param {string}  opts.destination  - The destination account ID.
 * @param {Asset}   opts.asset        - The asset to send.
 * @param {string}  opts.amount       - The amount to send.
 * @param {bool}    [opts.withMuxing] - Indicates that opts.destination is an
 *     M... address and should be interpreted fully as a muxed account. By
 *     default, this option is disabled until muxed accounts are mature.
 * @param {string}  [opts.source]     - The source account for the payment.
 *     Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation}   The resulting payment operation (xdr.PaymentOp)
 */
function payment(opts) {
  if (!opts.asset) {
    throw new Error('Must provide an asset for a payment operation');
  }
  if (!this.isValidAmount(opts.amount)) {
    throw new TypeError(this.constructAmountRequirementsError('amount'));
  }

  var attributes = {};
  try {
    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination, opts.withMuxing);
  } catch (e) {
    throw new Error('destination is invalid; did you forget to enable muxing?');
  }

  attributes.asset = opts.asset.toXDRObject();
  attributes.amount = this._toXDRAmount(opts.amount);
  var paymentOp = new _digitalbitsXdr_generated2.default.PaymentOp(attributes);

  var opAttributes = {};
  opAttributes.body = _digitalbitsXdr_generated2.default.OperationBody.payment(paymentOp);
  this.setSourceAccount(opAttributes, opts);

  return new _digitalbitsXdr_generated2.default.Operation(opAttributes);
}